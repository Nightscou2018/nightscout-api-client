<?php
/**
 * Entry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nightscout API
 *
 * Own your DData with the Nightscout API
 *
 * OpenAPI spec version: 0.8.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Entry Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Entry implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Entry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'date_string' => 'string',
        'date' => 'float',
        'sgv' => 'float',
        'direction' => 'string',
        'noise' => 'float',
        'filtered' => 'float',
        'unfiltered' => 'float',
        'rssi' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'date_string' => 'dateString',
        'date' => 'date',
        'sgv' => 'sgv',
        'direction' => 'direction',
        'noise' => 'noise',
        'filtered' => 'filtered',
        'unfiltered' => 'unfiltered',
        'rssi' => 'rssi'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'date_string' => 'setDateString',
        'date' => 'setDate',
        'sgv' => 'setSgv',
        'direction' => 'setDirection',
        'noise' => 'setNoise',
        'filtered' => 'setFiltered',
        'unfiltered' => 'setUnfiltered',
        'rssi' => 'setRssi'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'date_string' => 'getDateString',
        'date' => 'getDate',
        'sgv' => 'getSgv',
        'direction' => 'getDirection',
        'noise' => 'getNoise',
        'filtered' => 'getFiltered',
        'unfiltered' => 'getUnfiltered',
        'rssi' => 'getRssi'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['date_string'] = isset($data['date_string']) ? $data['date_string'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['sgv'] = isset($data['sgv']) ? $data['sgv'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['noise'] = isset($data['noise']) ? $data['noise'] : null;
        $this->container['filtered'] = isset($data['filtered']) ? $data['filtered'] : null;
        $this->container['unfiltered'] = isset($data['unfiltered']) ? $data['unfiltered'] : null;
        $this->container['rssi'] = isset($data['rssi']) ? $data['rssi'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type sgv, mbg, cal, etc
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets date_string
     * @return string
     */
    public function getDateString()
    {
        return $this->container['date_string'];
    }

    /**
     * Sets date_string
     * @param string $date_string dateString, prefer ISO `8601`
     * @return $this
     */
    public function setDateString($date_string)
    {
        $this->container['date_string'] = $date_string;

        return $this;
    }

    /**
     * Gets date
     * @return float
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param float $date Epoch
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets sgv
     * @return float
     */
    public function getSgv()
    {
        return $this->container['sgv'];
    }

    /**
     * Sets sgv
     * @param float $sgv The glucose reading. (only available for sgv types)
     * @return $this
     */
    public function setSgv($sgv)
    {
        $this->container['sgv'] = $sgv;

        return $this;
    }

    /**
     * Gets direction
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     * @param string $direction Direction of glucose trend reported by CGM. (only available for sgv types)
     * @return $this
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets noise
     * @return float
     */
    public function getNoise()
    {
        return $this->container['noise'];
    }

    /**
     * Sets noise
     * @param float $noise Noise level at time of reading. (only available for sgv types)
     * @return $this
     */
    public function setNoise($noise)
    {
        $this->container['noise'] = $noise;

        return $this;
    }

    /**
     * Gets filtered
     * @return float
     */
    public function getFiltered()
    {
        return $this->container['filtered'];
    }

    /**
     * Sets filtered
     * @param float $filtered The raw filtered value directly from CGM transmitter. (only available for sgv types)
     * @return $this
     */
    public function setFiltered($filtered)
    {
        $this->container['filtered'] = $filtered;

        return $this;
    }

    /**
     * Gets unfiltered
     * @return float
     */
    public function getUnfiltered()
    {
        return $this->container['unfiltered'];
    }

    /**
     * Sets unfiltered
     * @param float $unfiltered The raw unfiltered value directly from CGM transmitter. (only available for sgv types)
     * @return $this
     */
    public function setUnfiltered($unfiltered)
    {
        $this->container['unfiltered'] = $unfiltered;

        return $this;
    }

    /**
     * Gets rssi
     * @return float
     */
    public function getRssi()
    {
        return $this->container['rssi'];
    }

    /**
     * Sets rssi
     * @param float $rssi The signal strength from CGM transmitter. (only available for sgv types)
     * @return $this
     */
    public function setRssi($rssi)
    {
        $this->container['rssi'] = $rssi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
