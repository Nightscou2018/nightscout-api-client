<?php
/**
 * Settings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nightscout API
 *
 * Own your DData with the Nightscout API
 *
 * OpenAPI spec version: 0.8.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Settings Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Settings implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'units' => 'string',
        'time_format' => 'string',
        'custom_title' => 'string',
        'night_mode' => 'bool',
        'theme' => 'string',
        'language' => 'string',
        'show_plugins' => 'string',
        'show_rawbg' => 'string',
        'alarm_types' => 'string[]',
        'alarm_urgent_high' => 'bool',
        'alarm_high' => 'bool',
        'alarm_low' => 'bool',
        'alarm_urgent_low' => 'bool',
        'alarm_timeago_warn' => 'bool',
        'alarm_timeago_warn_mins' => 'float',
        'alarm_timeago_urgent' => 'bool',
        'alarm_timeago_urgent_mins' => 'float',
        'enable' => 'string[]',
        'thresholds' => '\Swagger\Client\Model\Threshold'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'units' => 'units',
        'time_format' => 'timeFormat',
        'custom_title' => 'customTitle',
        'night_mode' => 'nightMode',
        'theme' => 'theme',
        'language' => 'language',
        'show_plugins' => 'showPlugins',
        'show_rawbg' => 'showRawbg',
        'alarm_types' => 'alarmTypes',
        'alarm_urgent_high' => 'alarmUrgentHigh',
        'alarm_high' => 'alarmHigh',
        'alarm_low' => 'alarmLow',
        'alarm_urgent_low' => 'alarmUrgentLow',
        'alarm_timeago_warn' => 'alarmTimeagoWarn',
        'alarm_timeago_warn_mins' => 'alarmTimeagoWarnMins',
        'alarm_timeago_urgent' => 'alarmTimeagoUrgent',
        'alarm_timeago_urgent_mins' => 'alarmTimeagoUrgentMins',
        'enable' => 'enable',
        'thresholds' => 'thresholds'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'units' => 'setUnits',
        'time_format' => 'setTimeFormat',
        'custom_title' => 'setCustomTitle',
        'night_mode' => 'setNightMode',
        'theme' => 'setTheme',
        'language' => 'setLanguage',
        'show_plugins' => 'setShowPlugins',
        'show_rawbg' => 'setShowRawbg',
        'alarm_types' => 'setAlarmTypes',
        'alarm_urgent_high' => 'setAlarmUrgentHigh',
        'alarm_high' => 'setAlarmHigh',
        'alarm_low' => 'setAlarmLow',
        'alarm_urgent_low' => 'setAlarmUrgentLow',
        'alarm_timeago_warn' => 'setAlarmTimeagoWarn',
        'alarm_timeago_warn_mins' => 'setAlarmTimeagoWarnMins',
        'alarm_timeago_urgent' => 'setAlarmTimeagoUrgent',
        'alarm_timeago_urgent_mins' => 'setAlarmTimeagoUrgentMins',
        'enable' => 'setEnable',
        'thresholds' => 'setThresholds'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'units' => 'getUnits',
        'time_format' => 'getTimeFormat',
        'custom_title' => 'getCustomTitle',
        'night_mode' => 'getNightMode',
        'theme' => 'getTheme',
        'language' => 'getLanguage',
        'show_plugins' => 'getShowPlugins',
        'show_rawbg' => 'getShowRawbg',
        'alarm_types' => 'getAlarmTypes',
        'alarm_urgent_high' => 'getAlarmUrgentHigh',
        'alarm_high' => 'getAlarmHigh',
        'alarm_low' => 'getAlarmLow',
        'alarm_urgent_low' => 'getAlarmUrgentLow',
        'alarm_timeago_warn' => 'getAlarmTimeagoWarn',
        'alarm_timeago_warn_mins' => 'getAlarmTimeagoWarnMins',
        'alarm_timeago_urgent' => 'getAlarmTimeagoUrgent',
        'alarm_timeago_urgent_mins' => 'getAlarmTimeagoUrgentMins',
        'enable' => 'getEnable',
        'thresholds' => 'getThresholds'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TIME_FORMAT__12 = '12';
    const TIME_FORMAT__24 = '24';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTimeFormatAllowableValues()
    {
        return [
            self::TIME_FORMAT__12,
            self::TIME_FORMAT__24,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['time_format'] = isset($data['time_format']) ? $data['time_format'] : null;
        $this->container['custom_title'] = isset($data['custom_title']) ? $data['custom_title'] : null;
        $this->container['night_mode'] = isset($data['night_mode']) ? $data['night_mode'] : null;
        $this->container['theme'] = isset($data['theme']) ? $data['theme'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['show_plugins'] = isset($data['show_plugins']) ? $data['show_plugins'] : null;
        $this->container['show_rawbg'] = isset($data['show_rawbg']) ? $data['show_rawbg'] : null;
        $this->container['alarm_types'] = isset($data['alarm_types']) ? $data['alarm_types'] : null;
        $this->container['alarm_urgent_high'] = isset($data['alarm_urgent_high']) ? $data['alarm_urgent_high'] : null;
        $this->container['alarm_high'] = isset($data['alarm_high']) ? $data['alarm_high'] : null;
        $this->container['alarm_low'] = isset($data['alarm_low']) ? $data['alarm_low'] : null;
        $this->container['alarm_urgent_low'] = isset($data['alarm_urgent_low']) ? $data['alarm_urgent_low'] : null;
        $this->container['alarm_timeago_warn'] = isset($data['alarm_timeago_warn']) ? $data['alarm_timeago_warn'] : null;
        $this->container['alarm_timeago_warn_mins'] = isset($data['alarm_timeago_warn_mins']) ? $data['alarm_timeago_warn_mins'] : null;
        $this->container['alarm_timeago_urgent'] = isset($data['alarm_timeago_urgent']) ? $data['alarm_timeago_urgent'] : null;
        $this->container['alarm_timeago_urgent_mins'] = isset($data['alarm_timeago_urgent_mins']) ? $data['alarm_timeago_urgent_mins'] : null;
        $this->container['enable'] = isset($data['enable']) ? $data['enable'] : null;
        $this->container['thresholds'] = isset($data['thresholds']) ? $data['thresholds'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["12", "24"];
        if (!in_array($this->container['time_format'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'time_format', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["12", "24"];
        if (!in_array($this->container['time_format'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets units
     * @return string
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     * @param string $units Default units for glucose measurements across the server.
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets time_format
     * @return string
     */
    public function getTimeFormat()
    {
        return $this->container['time_format'];
    }

    /**
     * Sets time_format
     * @param string $time_format Default time format
     * @return $this
     */
    public function setTimeFormat($time_format)
    {
        $allowed_values = array('12', '24');
        if (!is_null($time_format) && (!in_array($time_format, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'time_format', must be one of '12', '24'");
        }
        $this->container['time_format'] = $time_format;

        return $this;
    }

    /**
     * Gets custom_title
     * @return string
     */
    public function getCustomTitle()
    {
        return $this->container['custom_title'];
    }

    /**
     * Sets custom_title
     * @param string $custom_title Default custom title to be displayed system wide.
     * @return $this
     */
    public function setCustomTitle($custom_title)
    {
        $this->container['custom_title'] = $custom_title;

        return $this;
    }

    /**
     * Gets night_mode
     * @return bool
     */
    public function getNightMode()
    {
        return $this->container['night_mode'];
    }

    /**
     * Sets night_mode
     * @param bool $night_mode Should Night mode be enabled by default?
     * @return $this
     */
    public function setNightMode($night_mode)
    {
        $this->container['night_mode'] = $night_mode;

        return $this;
    }

    /**
     * Gets theme
     * @return string
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     * @param string $theme Default theme to be displayed system wide, `default`, `colors`, `colorblindfriendly`.
     * @return $this
     */
    public function setTheme($theme)
    {
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language Default language code to be used system wide
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets show_plugins
     * @return string
     */
    public function getShowPlugins()
    {
        return $this->container['show_plugins'];
    }

    /**
     * Sets show_plugins
     * @param string $show_plugins Plugins that should be shown by default
     * @return $this
     */
    public function setShowPlugins($show_plugins)
    {
        $this->container['show_plugins'] = $show_plugins;

        return $this;
    }

    /**
     * Gets show_rawbg
     * @return string
     */
    public function getShowRawbg()
    {
        return $this->container['show_rawbg'];
    }

    /**
     * Sets show_rawbg
     * @param string $show_rawbg If Raw BG is enabled when should it be shown? `never`, `always`, `noise`
     * @return $this
     */
    public function setShowRawbg($show_rawbg)
    {
        $this->container['show_rawbg'] = $show_rawbg;

        return $this;
    }

    /**
     * Gets alarm_types
     * @return string[]
     */
    public function getAlarmTypes()
    {
        return $this->container['alarm_types'];
    }

    /**
     * Sets alarm_types
     * @param string[] $alarm_types Enabled alarm types, can be multiple
     * @return $this
     */
    public function setAlarmTypes($alarm_types)
    {
        $this->container['alarm_types'] = $alarm_types;

        return $this;
    }

    /**
     * Gets alarm_urgent_high
     * @return bool
     */
    public function getAlarmUrgentHigh()
    {
        return $this->container['alarm_urgent_high'];
    }

    /**
     * Sets alarm_urgent_high
     * @param bool $alarm_urgent_high Enable/Disable client-side Urgent High alarms by default, for use with `simple` alarms.
     * @return $this
     */
    public function setAlarmUrgentHigh($alarm_urgent_high)
    {
        $this->container['alarm_urgent_high'] = $alarm_urgent_high;

        return $this;
    }

    /**
     * Gets alarm_high
     * @return bool
     */
    public function getAlarmHigh()
    {
        return $this->container['alarm_high'];
    }

    /**
     * Sets alarm_high
     * @param bool $alarm_high Enable/Disable client-side High alarms by default, for use with `simple` alarms.
     * @return $this
     */
    public function setAlarmHigh($alarm_high)
    {
        $this->container['alarm_high'] = $alarm_high;

        return $this;
    }

    /**
     * Gets alarm_low
     * @return bool
     */
    public function getAlarmLow()
    {
        return $this->container['alarm_low'];
    }

    /**
     * Sets alarm_low
     * @param bool $alarm_low Enable/Disable client-side Low alarms by default, for use with `simple` alarms.
     * @return $this
     */
    public function setAlarmLow($alarm_low)
    {
        $this->container['alarm_low'] = $alarm_low;

        return $this;
    }

    /**
     * Gets alarm_urgent_low
     * @return bool
     */
    public function getAlarmUrgentLow()
    {
        return $this->container['alarm_urgent_low'];
    }

    /**
     * Sets alarm_urgent_low
     * @param bool $alarm_urgent_low Enable/Disable client-side Urgent Low alarms by default, for use with `simple` alarms.
     * @return $this
     */
    public function setAlarmUrgentLow($alarm_urgent_low)
    {
        $this->container['alarm_urgent_low'] = $alarm_urgent_low;

        return $this;
    }

    /**
     * Gets alarm_timeago_warn
     * @return bool
     */
    public function getAlarmTimeagoWarn()
    {
        return $this->container['alarm_timeago_warn'];
    }

    /**
     * Sets alarm_timeago_warn
     * @param bool $alarm_timeago_warn Enable/Disable client-side stale data alarms by default.
     * @return $this
     */
    public function setAlarmTimeagoWarn($alarm_timeago_warn)
    {
        $this->container['alarm_timeago_warn'] = $alarm_timeago_warn;

        return $this;
    }

    /**
     * Gets alarm_timeago_warn_mins
     * @return float
     */
    public function getAlarmTimeagoWarnMins()
    {
        return $this->container['alarm_timeago_warn_mins'];
    }

    /**
     * Sets alarm_timeago_warn_mins
     * @param float $alarm_timeago_warn_mins Number of minutes before a stale data warning is generated.
     * @return $this
     */
    public function setAlarmTimeagoWarnMins($alarm_timeago_warn_mins)
    {
        $this->container['alarm_timeago_warn_mins'] = $alarm_timeago_warn_mins;

        return $this;
    }

    /**
     * Gets alarm_timeago_urgent
     * @return bool
     */
    public function getAlarmTimeagoUrgent()
    {
        return $this->container['alarm_timeago_urgent'];
    }

    /**
     * Sets alarm_timeago_urgent
     * @param bool $alarm_timeago_urgent Enable/Disable client-side urgent stale data alarms by default.
     * @return $this
     */
    public function setAlarmTimeagoUrgent($alarm_timeago_urgent)
    {
        $this->container['alarm_timeago_urgent'] = $alarm_timeago_urgent;

        return $this;
    }

    /**
     * Gets alarm_timeago_urgent_mins
     * @return float
     */
    public function getAlarmTimeagoUrgentMins()
    {
        return $this->container['alarm_timeago_urgent_mins'];
    }

    /**
     * Sets alarm_timeago_urgent_mins
     * @param float $alarm_timeago_urgent_mins Number of minutes before a stale data warning is generated.
     * @return $this
     */
    public function setAlarmTimeagoUrgentMins($alarm_timeago_urgent_mins)
    {
        $this->container['alarm_timeago_urgent_mins'] = $alarm_timeago_urgent_mins;

        return $this;
    }

    /**
     * Gets enable
     * @return string[]
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     * @param string[] $enable Enabled features
     * @return $this
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets thresholds
     * @return \Swagger\Client\Model\Threshold
     */
    public function getThresholds()
    {
        return $this->container['thresholds'];
    }

    /**
     * Sets thresholds
     * @param \Swagger\Client\Model\Threshold $thresholds
     * @return $this
     */
    public function setThresholds($thresholds)
    {
        $this->container['thresholds'] = $thresholds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
