<?php
/**
 * Status
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nightscout API
 *
 * Own your DData with the Nightscout API
 *
 * OpenAPI spec version: 0.8.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Status Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Status implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'api_enabled' => 'bool',
        'careportal_enabled' => 'bool',
        'head' => 'string',
        'name' => 'string',
        'version' => 'string',
        'settings' => '\Swagger\Client\Model\Settings',
        'extended_settings' => '\Swagger\Client\Model\ExtendedSettings'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'api_enabled' => 'apiEnabled',
        'careportal_enabled' => 'careportalEnabled',
        'head' => 'head',
        'name' => 'name',
        'version' => 'version',
        'settings' => 'settings',
        'extended_settings' => 'extendedSettings'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'api_enabled' => 'setApiEnabled',
        'careportal_enabled' => 'setCareportalEnabled',
        'head' => 'setHead',
        'name' => 'setName',
        'version' => 'setVersion',
        'settings' => 'setSettings',
        'extended_settings' => 'setExtendedSettings'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'api_enabled' => 'getApiEnabled',
        'careportal_enabled' => 'getCareportalEnabled',
        'head' => 'getHead',
        'name' => 'getName',
        'version' => 'getVersion',
        'settings' => 'getSettings',
        'extended_settings' => 'getExtendedSettings'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api_enabled'] = isset($data['api_enabled']) ? $data['api_enabled'] : null;
        $this->container['careportal_enabled'] = isset($data['careportal_enabled']) ? $data['careportal_enabled'] : null;
        $this->container['head'] = isset($data['head']) ? $data['head'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['extended_settings'] = isset($data['extended_settings']) ? $data['extended_settings'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets api_enabled
     * @return bool
     */
    public function getApiEnabled()
    {
        return $this->container['api_enabled'];
    }

    /**
     * Sets api_enabled
     * @param bool $api_enabled Whether or not the REST API is enabled.
     * @return $this
     */
    public function setApiEnabled($api_enabled)
    {
        $this->container['api_enabled'] = $api_enabled;

        return $this;
    }

    /**
     * Gets careportal_enabled
     * @return bool
     */
    public function getCareportalEnabled()
    {
        return $this->container['careportal_enabled'];
    }

    /**
     * Sets careportal_enabled
     * @param bool $careportal_enabled Whether or not the careportal is enabled in the API.
     * @return $this
     */
    public function setCareportalEnabled($careportal_enabled)
    {
        $this->container['careportal_enabled'] = $careportal_enabled;

        return $this;
    }

    /**
     * Gets head
     * @return string
     */
    public function getHead()
    {
        return $this->container['head'];
    }

    /**
     * Sets head
     * @param string $head The git identifier for the running instance of the app.
     * @return $this
     */
    public function setHead($head)
    {
        $this->container['head'] = $head;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Nightscout (static)
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version The version label of the app.
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets settings
     * @return \Swagger\Client\Model\Settings
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     * @param \Swagger\Client\Model\Settings $settings
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets extended_settings
     * @return \Swagger\Client\Model\ExtendedSettings
     */
    public function getExtendedSettings()
    {
        return $this->container['extended_settings'];
    }

    /**
     * Sets extended_settings
     * @param \Swagger\Client\Model\ExtendedSettings $extended_settings
     * @return $this
     */
    public function setExtendedSettings($extended_settings)
    {
        $this->container['extended_settings'] = $extended_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
