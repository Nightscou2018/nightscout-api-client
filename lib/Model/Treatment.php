<?php
/**
 * Treatment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nightscout API
 *
 * Own your DData with the Nightscout API
 *
 * OpenAPI spec version: 0.8.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Treatment Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Treatment implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Treatment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'string',
        'event_type' => 'string',
        'created_at' => 'string',
        'glucose' => 'string',
        'glucose_type' => 'string',
        'carbs' => 'float',
        'insulin' => 'float',
        'units' => 'string',
        'notes' => 'string',
        'entered_by' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'event_type' => 'eventType',
        'created_at' => 'created_at',
        'glucose' => 'glucose',
        'glucose_type' => 'glucoseType',
        'carbs' => 'carbs',
        'insulin' => 'insulin',
        'units' => 'units',
        'notes' => 'notes',
        'entered_by' => 'enteredBy'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'event_type' => 'setEventType',
        'created_at' => 'setCreatedAt',
        'glucose' => 'setGlucose',
        'glucose_type' => 'setGlucoseType',
        'carbs' => 'setCarbs',
        'insulin' => 'setInsulin',
        'units' => 'setUnits',
        'notes' => 'setNotes',
        'entered_by' => 'setEnteredBy'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'event_type' => 'getEventType',
        'created_at' => 'getCreatedAt',
        'glucose' => 'getGlucose',
        'glucose_type' => 'getGlucoseType',
        'carbs' => 'getCarbs',
        'insulin' => 'getInsulin',
        'units' => 'getUnits',
        'notes' => 'getNotes',
        'entered_by' => 'getEnteredBy'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['event_type'] = isset($data['event_type']) ? $data['event_type'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['glucose'] = isset($data['glucose']) ? $data['glucose'] : null;
        $this->container['glucose_type'] = isset($data['glucose_type']) ? $data['glucose_type'] : null;
        $this->container['carbs'] = isset($data['carbs']) ? $data['carbs'] : null;
        $this->container['insulin'] = isset($data['insulin']) ? $data['insulin'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets _id
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     * @param string $_id Internally assigned id.
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets event_type
     * @return string
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     * @param string $event_type The type of treatment event.
     * @return $this
     */
    public function setEventType($event_type)
    {
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at The date of the event, might be set retroactively .
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets glucose
     * @return string
     */
    public function getGlucose()
    {
        return $this->container['glucose'];
    }

    /**
     * Sets glucose
     * @param string $glucose Current glucose.
     * @return $this
     */
    public function setGlucose($glucose)
    {
        $this->container['glucose'] = $glucose;

        return $this;
    }

    /**
     * Gets glucose_type
     * @return string
     */
    public function getGlucoseType()
    {
        return $this->container['glucose_type'];
    }

    /**
     * Sets glucose_type
     * @param string $glucose_type Method used to obtain glucose, Finger or Sensor.
     * @return $this
     */
    public function setGlucoseType($glucose_type)
    {
        $this->container['glucose_type'] = $glucose_type;

        return $this;
    }

    /**
     * Gets carbs
     * @return float
     */
    public function getCarbs()
    {
        return $this->container['carbs'];
    }

    /**
     * Sets carbs
     * @param float $carbs Number of carbs.
     * @return $this
     */
    public function setCarbs($carbs)
    {
        $this->container['carbs'] = $carbs;

        return $this;
    }

    /**
     * Gets insulin
     * @return float
     */
    public function getInsulin()
    {
        return $this->container['insulin'];
    }

    /**
     * Sets insulin
     * @param float $insulin Amount of insulin, if any.
     * @return $this
     */
    public function setInsulin($insulin)
    {
        $this->container['insulin'] = $insulin;

        return $this;
    }

    /**
     * Gets units
     * @return string
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     * @param string $units The units for the glucose value, mg/dl or mmol.
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes Description/notes of treatment.
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets entered_by
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     * @param string $entered_by Who entered the treatment.
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
