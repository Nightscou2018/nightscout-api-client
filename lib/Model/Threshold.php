<?php
/**
 * Threshold
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nightscout API
 *
 * Own your DData with the Nightscout API
 *
 * OpenAPI spec version: 0.8.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Threshold Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Threshold implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Threshold';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bg_high' => 'int',
        'bg_target_top' => 'int',
        'bg_target_bottom' => 'int',
        'bg_low' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'bg_high' => 'bg_high',
        'bg_target_top' => 'bg_target_top',
        'bg_target_bottom' => 'bg_target_bottom',
        'bg_low' => 'bg_low'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'bg_high' => 'setBgHigh',
        'bg_target_top' => 'setBgTargetTop',
        'bg_target_bottom' => 'setBgTargetBottom',
        'bg_low' => 'setBgLow'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'bg_high' => 'getBgHigh',
        'bg_target_top' => 'getBgTargetTop',
        'bg_target_bottom' => 'getBgTargetBottom',
        'bg_low' => 'getBgLow'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bg_high'] = isset($data['bg_high']) ? $data['bg_high'] : null;
        $this->container['bg_target_top'] = isset($data['bg_target_top']) ? $data['bg_target_top'] : null;
        $this->container['bg_target_bottom'] = isset($data['bg_target_bottom']) ? $data['bg_target_bottom'] : null;
        $this->container['bg_low'] = isset($data['bg_low']) ? $data['bg_low'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets bg_high
     * @return int
     */
    public function getBgHigh()
    {
        return $this->container['bg_high'];
    }

    /**
     * Sets bg_high
     * @param int $bg_high High BG range.
     * @return $this
     */
    public function setBgHigh($bg_high)
    {
        $this->container['bg_high'] = $bg_high;

        return $this;
    }

    /**
     * Gets bg_target_top
     * @return int
     */
    public function getBgTargetTop()
    {
        return $this->container['bg_target_top'];
    }

    /**
     * Sets bg_target_top
     * @param int $bg_target_top Top of target range.
     * @return $this
     */
    public function setBgTargetTop($bg_target_top)
    {
        $this->container['bg_target_top'] = $bg_target_top;

        return $this;
    }

    /**
     * Gets bg_target_bottom
     * @return int
     */
    public function getBgTargetBottom()
    {
        return $this->container['bg_target_bottom'];
    }

    /**
     * Sets bg_target_bottom
     * @param int $bg_target_bottom Bottom of target range.
     * @return $this
     */
    public function setBgTargetBottom($bg_target_bottom)
    {
        $this->container['bg_target_bottom'] = $bg_target_bottom;

        return $this;
    }

    /**
     * Gets bg_low
     * @return int
     */
    public function getBgLow()
    {
        return $this->container['bg_low'];
    }

    /**
     * Sets bg_low
     * @param int $bg_low Low BG range.
     * @return $this
     */
    public function setBgLow($bg_low)
    {
        $this->container['bg_low'] = $bg_low;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
