<?php
/**
 * DebugApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nightscout API
 *
 * Own your DData with the Nightscout API
 *
 * OpenAPI spec version: 0.8.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DebugApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DebugApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DebugApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation echoStorageSpecGet
     *
     * View generated Mongo Query object
     *
     * @param string $storage &#x60;entries&#x60;, or &#x60;treatments&#x60; to select the storage layer. (required)
     * @param string $spec entry id, such as &#x60;55cf81bc436037528ec75fa5&#x60; or a type filter such as &#x60;sgv&#x60;, &#x60;mbg&#x60;, etc. This parameter is optional. (required)
     * @param string $find The query used to find entries, support nested query syntax, for example &#x60;find[dateString][$gte]&#x3D;2015-08-27&#x60;.  All find parameters are interpreted as strings. (optional)
     * @param float $count Number of entries to return. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\MongoQuery
     */
    public function echoStorageSpecGet($storage, $spec, $find = null, $count = null)
    {
        list($response) = $this->echoStorageSpecGetWithHttpInfo($storage, $spec, $find, $count);
        return $response;
    }

    /**
     * Operation echoStorageSpecGetWithHttpInfo
     *
     * View generated Mongo Query object
     *
     * @param string $storage &#x60;entries&#x60;, or &#x60;treatments&#x60; to select the storage layer. (required)
     * @param string $spec entry id, such as &#x60;55cf81bc436037528ec75fa5&#x60; or a type filter such as &#x60;sgv&#x60;, &#x60;mbg&#x60;, etc. This parameter is optional. (required)
     * @param string $find The query used to find entries, support nested query syntax, for example &#x60;find[dateString][$gte]&#x3D;2015-08-27&#x60;.  All find parameters are interpreted as strings. (optional)
     * @param float $count Number of entries to return. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\MongoQuery, HTTP status code, HTTP response headers (array of strings)
     */
    public function echoStorageSpecGetWithHttpInfo($storage, $spec, $find = null, $count = null)
    {
        // verify the required parameter 'storage' is set
        if ($storage === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storage when calling echoStorageSpecGet');
        }
        // verify the required parameter 'spec' is set
        if ($spec === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec when calling echoStorageSpecGet');
        }
        // parse inputs
        $resourcePath = "/echo/{storage}/{spec}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($find !== null) {
            $queryParams['find'] = $this->apiClient->getSerializer()->toQueryValue($find);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // path params
        if ($storage !== null) {
            $resourcePath = str_replace(
                "{" . "storage" . "}",
                $this->apiClient->getSerializer()->toPathValue($storage),
                $resourcePath
            );
        }
        // path params
        if ($spec !== null) {
            $resourcePath = str_replace(
                "{" . "spec" . "}",
                $this->apiClient->getSerializer()->toPathValue($spec),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_secret');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-secret'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\MongoQuery',
                '/echo/{storage}/{spec}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\MongoQuery', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MongoQuery', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation timesEchoPrefixRegexGet
     *
     * Echo the query object to be used.
     *
     * @param string $prefix Prefix to use in constructing a prefix-based regex. (required)
     * @param string $regex Tail part of regexp to use in expanding/construccting a query object. Regexp also has bash-style brace and glob expansion applied to it, creating ways to search for modal times of day, perhaps using something like this syntax: &#x60;T{15..17}:.*&#x60;, this would search for all records from 3pm to 5pm. (required)
     * @param string $find The query used to find entries, support nested query syntax, for example &#x60;find[dateString][$gte]&#x3D;2015-08-27&#x60;.  All find parameters are interpreted as strings. (optional)
     * @param float $count Number of entries to return. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\MongoQuery
     */
    public function timesEchoPrefixRegexGet($prefix, $regex, $find = null, $count = null)
    {
        list($response) = $this->timesEchoPrefixRegexGetWithHttpInfo($prefix, $regex, $find, $count);
        return $response;
    }

    /**
     * Operation timesEchoPrefixRegexGetWithHttpInfo
     *
     * Echo the query object to be used.
     *
     * @param string $prefix Prefix to use in constructing a prefix-based regex. (required)
     * @param string $regex Tail part of regexp to use in expanding/construccting a query object. Regexp also has bash-style brace and glob expansion applied to it, creating ways to search for modal times of day, perhaps using something like this syntax: &#x60;T{15..17}:.*&#x60;, this would search for all records from 3pm to 5pm. (required)
     * @param string $find The query used to find entries, support nested query syntax, for example &#x60;find[dateString][$gte]&#x3D;2015-08-27&#x60;.  All find parameters are interpreted as strings. (optional)
     * @param float $count Number of entries to return. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\MongoQuery, HTTP status code, HTTP response headers (array of strings)
     */
    public function timesEchoPrefixRegexGetWithHttpInfo($prefix, $regex, $find = null, $count = null)
    {
        // verify the required parameter 'prefix' is set
        if ($prefix === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prefix when calling timesEchoPrefixRegexGet');
        }
        // verify the required parameter 'regex' is set
        if ($regex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $regex when calling timesEchoPrefixRegexGet');
        }
        // parse inputs
        $resourcePath = "/times/echo/{prefix}/{regex}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($find !== null) {
            $queryParams['find'] = $this->apiClient->getSerializer()->toQueryValue($find);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // path params
        if ($prefix !== null) {
            $resourcePath = str_replace(
                "{" . "prefix" . "}",
                $this->apiClient->getSerializer()->toPathValue($prefix),
                $resourcePath
            );
        }
        // path params
        if ($regex !== null) {
            $resourcePath = str_replace(
                "{" . "regex" . "}",
                $this->apiClient->getSerializer()->toPathValue($regex),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_secret');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-secret'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\MongoQuery',
                '/times/echo/{prefix}/{regex}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\MongoQuery', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MongoQuery', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
